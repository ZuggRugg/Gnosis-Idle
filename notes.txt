* Structure of the Project | Modularize
- Break up the compiler.cpp file into Lexer/Parser/Interpreter

- Develop the Abstract Syntax Tree fully and integrate

- make Main file where everything is executed
  
Lexer has the Tokens and the functions related to Get_next_token()
Parser has stuff related to eat(), term(), factor(), and expr()
Interpreter has new functions around AST, interacts with parser.




* how term and operator precedence works
- term deals with multiplying and dividing
- new method called factor which returns current_token.value and then eats token
- the expr function now again deals with plus and minus operators
     expr   : term ((PLUS | MINUS) term)*
     term   : factor ((MUL | DIV) factor)*
     factor : INTEGER      

     expr -> term -> factor
     where expr immediatly hands it off to term which checks the higher precedence first
     then hands it back to expr to check the lower precedence operators.
     the factor() method is used to check for Integer/Numbers then eat the current_token    

* get_tokens
void get_tokens(std::string rec, std::vector<token>& t_answer) {
  for (int i = 0; i < rec.length(); i++) {
    
    if (rec[i] == '+') { //check if its + operator
      t_answer.push_back({PLUS, 999});
    }

    if(isdigit(rec[i])) { 
      int number = rec[i] - '0';  // Convert char digit to int
      t_answer.push_back({NUMBER, number});
    }

    if(rec[i] == ' ') {
      t_answer.push_back({WHITESPACE, 999});
    }

    if(i == rec.length()-1) { t_answer.push_back({EOF_, 999}); } // add end of file token
  }

  //read tokens
  for(int i = 0; i < t_answer.size(); i++) {
    std::cout << getTokenName(t_answer[i].type) << " - " << t_answer[i].value << "\n"; 
  }
}


* bool eat
// add the out_token variable
bool eat(std::vector<token>& tokens, size_t& pos, Token_Type expected) {
    if (pos < tokens.size() && tokens[pos].type == expected) {
        pos++;
        return true;
    }
    std::cout << "\nError: Expected " << getTokenName(expected) << " at position " << pos << "\n";
    return false;
}



* int expr
int expr(std::vector<token>& t_answer, size_t& pos, std::string answer) {
    token current_token = get_token(answer, t_answer, pos);
    int result = 0;

    if(!eat(t_answer, pos, NUMBER, answer, current_token)) { exit(1); }
    if(!(eat(t_answer, pos, PLUS, answer, current_token) || eat(t_answer, pos, MINUS, answer, current_token))) { exit(1); }
    if(!eat(t_answer, pos, NUMBER, answer, current_token)) { exit(1); } 

    token left = t_answer[0];
    token Op = t_answer[1];
    token right = t_answer[2];


    if(Op.type == PLUS) {
    result = left.value + right.value;
    } else { result = left.value - right.value; }

    return result;
}
	
* new expr
 token current_token = get_next_token();
    int result = term(...);

    while (true) {
        if (!isOperator(current_token.type)) break;

        Token_Type op = current_token.type;
        current_token = eat(...);

        int rhs = term(...);

        switch (op) {
            case PLUS: result += rhs; break;
            case MINUS: result -= rhs; break;
            case MULTIPLY: result *= rhs; break;
            case DIVIDE: result /= rhs; break;
            default:
                std::cerr << "Unexpected operator\n";
                exit(1);
        }
    }
    return result;


