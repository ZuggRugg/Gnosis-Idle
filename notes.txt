* get_tokens
void get_tokens(std::string rec, std::vector<token>& t_answer) {
  for (int i = 0; i < rec.length(); i++) {
    
    if (rec[i] == '+') { //check if its + operator
      t_answer.push_back({PLUS, 999});
    }

    if(isdigit(rec[i])) { 
      int number = rec[i] - '0';  // Convert char digit to int
      t_answer.push_back({NUMBER, number});
    }

    if(rec[i] == ' ') {
      t_answer.push_back({WHITESPACE, 999});
    }

    if(i == rec.length()-1) { t_answer.push_back({EOF_, 999}); } // add end of file token
  }

  //read tokens
  for(int i = 0; i < t_answer.size(); i++) {
    std::cout << getTokenName(t_answer[i].type) << " - " << t_answer[i].value << "\n"; 
  }
}


* bool eat
// add the out_token variable
bool eat(std::vector<token>& tokens, size_t& pos, Token_Type expected) {
    if (pos < tokens.size() && tokens[pos].type == expected) {
        pos++;
        return true;
    }
    std::cout << "\nError: Expected " << getTokenName(expected) << " at position " << pos << "\n";
    return false;
}



* int expr
int expr(std::vector<token>& t_answer, size_t& pos, std::string answer) {
    token current_token = get_token(answer, t_answer, pos);
    int result = 0;

    if(!eat(t_answer, pos, NUMBER, answer, current_token)) { exit(1); }
    if(!(eat(t_answer, pos, PLUS, answer, current_token) || eat(t_answer, pos, MINUS, answer, current_token))) { exit(1); }
    if(!eat(t_answer, pos, NUMBER, answer, current_token)) { exit(1); } 

    token left = t_answer[0];
    token Op = t_answer[1];
    token right = t_answer[2];


    if(Op.type == PLUS) {
    result = left.value + right.value;
    } else { result = left.value - right.value; }

    return result;
}

* new expr
token current_token = get_next_token(answer, t_answer, pos);

  // Parse first number
  int left = current_token.value;
  eat(t_answer, pos, NUMBER, answer, current_token);

  // Parse operator
  Token_Type op = current_token.type;
  if (op != PLUS && op != MINUS) {
    std::cerr << "Error: Expected '+' or '-' after number\n";
    exit(1);
  }
  eat(t_answer, pos, op, answer, current_token);

  // Parse second number
  int right = current_token.value;
  eat(t_answer, pos, NUMBER, answer, current_token);

  // Evaluate expression
  return (op == PLUS) ? (left + right) : (left - right);
